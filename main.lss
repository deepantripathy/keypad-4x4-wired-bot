
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000005f0  00000684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800078  00800078  0000069c  2**0
                  ALLOC
  3 .stab         000010f8  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000861  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a7 02 	call	0x54e	; 0x54e <main>
  8a:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dely_ns>:
}

void dely_ns(unsigned char tim)
{
	for(j=0;j<tim;j++)
  92:	10 92 79 00 	sts	0x0079, r1
  96:	20 91 78 00 	lds	r18, 0x0078
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <dely_ns+0x10>
  9e:	9f 5f       	subi	r25, 0xFF	; 255
  a0:	2b e0       	ldi	r18, 0x0B	; 11
  a2:	98 17       	cp	r25, r24
  a4:	e0 f3       	brcs	.-8      	; 0x9e <dely_ns+0xc>
  a6:	20 93 78 00 	sts	0x0078, r18
  aa:	90 93 79 00 	sts	0x0079, r25
  ae:	08 95       	ret

000000b0 <latch>:
  b0:	aa 98       	cbi	0x15, 2	; 21
  b2:	88 ec       	ldi	r24, 0xC8	; 200
  b4:	0e 94 49 00 	call	0x92	; 0x92 <dely_ns>
  b8:	aa 9a       	sbi	0x15, 2	; 21
  ba:	88 ec       	ldi	r24, 0xC8	; 200
  bc:	0e 94 49 00 	call	0x92	; 0x92 <dely_ns>
  c0:	aa 98       	cbi	0x15, 2	; 21
  c2:	08 95       	ret

000000c4 <lcd_cmd>:
	{
		for(k=0;k<11;k++)
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	08 2f       	mov	r16, r24
	PORTC&=~0x07;
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	88 7f       	andi	r24, 0xF8	; 248
  ce:	85 bb       	out	0x15, r24	; 21
	PORTC=((cmd&0xF0));			
  d0:	80 2f       	mov	r24, r16
  d2:	80 7f       	andi	r24, 0xF0	; 240
  d4:	85 bb       	out	0x15, r24	; 21
	latch();
  d6:	0e 94 58 00 	call	0xb0	; 0xb0 <latch>
	PORTC=(((cmd&(0x0F))*16));	
  da:	11 27       	eor	r17, r17
  dc:	0f 70       	andi	r16, 0x0F	; 15
  de:	10 70       	andi	r17, 0x00	; 0
  e0:	84 e0       	ldi	r24, 0x04	; 4
  e2:	00 0f       	add	r16, r16
  e4:	11 1f       	adc	r17, r17
  e6:	8a 95       	dec	r24
  e8:	e1 f7       	brne	.-8      	; 0xe2 <lcd_cmd+0x1e>
  ea:	05 bb       	out	0x15, r16	; 21
	latch();
  ec:	0e 94 58 00 	call	0xb0	; 0xb0 <latch>
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	08 95       	ret

000000f6 <lcd_char>:
}


void lcd_char(unsigned char single)
{
  f6:	1f 93       	push	r17
  f8:	18 2f       	mov	r17, r24
	PORTC=0x01;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	85 bb       	out	0x15, r24	; 21
	PORTC=0x00;
  fe:	15 ba       	out	0x15, r1	; 21
	PORTC=(single&0xF0)|0x01;						
 100:	81 2f       	mov	r24, r17
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	81 60       	ori	r24, 0x01	; 1
 106:	85 bb       	out	0x15, r24	; 21
	latch();
 108:	0e 94 58 00 	call	0xb0	; 0xb0 <latch>
	PORTC=((single&(0x0F))*16)|0x01;
 10c:	12 95       	swap	r17
 10e:	10 7f       	andi	r17, 0xF0	; 240
 110:	11 60       	ori	r17, 0x01	; 1
 112:	15 bb       	out	0x15, r17	; 21
	latch();
 114:	0e 94 58 00 	call	0xb0	; 0xb0 <latch>
 118:	1f 91       	pop	r17
 11a:	08 95       	ret

0000011c <lcd_string>:
}

void lcd_string(unsigned char str[32])
{
 11c:	ef 92       	push	r14
 11e:	ff 92       	push	r15
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	7c 01       	movw	r14, r24
	unsigned char k=0;
	PORTC=0x01;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	85 bb       	out	0x15, r24	; 21
	PORTC=0X00;
 12e:	15 ba       	out	0x15, r1	; 21
 130:	00 e0       	ldi	r16, 0x00	; 0
 132:	10 e0       	ldi	r17, 0x00	; 0
 134:	14 c0       	rjmp	.+40     	; 0x15e <lcd_string+0x42>
		while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 136:	90 31       	cpi	r25, 0x10	; 16
 138:	19 f4       	brne	.+6      	; 0x140 <lcd_string+0x24>
				lcd_cmd(0XC0);
 13a:	80 ec       	ldi	r24, 0xC0	; 192
 13c:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_cmd>
			PORTC=((str[k])&0xF0)|0x01;
 140:	88 81       	ld	r24, Y
 142:	80 7f       	andi	r24, 0xF0	; 240
 144:	81 60       	ori	r24, 0x01	; 1
 146:	85 bb       	out	0x15, r24	; 21
			latch();
 148:	0e 94 58 00 	call	0xb0	; 0xb0 <latch>
			PORTC=((str[k]&(0x0F))*16)|0x01;
 14c:	88 81       	ld	r24, Y
 14e:	82 95       	swap	r24
 150:	80 7f       	andi	r24, 0xF0	; 240
 152:	81 60       	ori	r24, 0x01	; 1
 154:	85 bb       	out	0x15, r24	; 21
			latch();
 156:	0e 94 58 00 	call	0xb0	; 0xb0 <latch>
 15a:	0f 5f       	subi	r16, 0xFF	; 255
 15c:	1f 4f       	sbci	r17, 0xFF	; 255
 15e:	90 2f       	mov	r25, r16
 160:	e7 01       	movw	r28, r14
 162:	c0 0f       	add	r28, r16
 164:	d1 1d       	adc	r29, r1
 166:	88 81       	ld	r24, Y
 168:	88 23       	and	r24, r24
 16a:	29 f7       	brne	.-54     	; 0x136 <lcd_string+0x1a>
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	ff 90       	pop	r15
 176:	ef 90       	pop	r14
 178:	08 95       	ret

0000017a <lcd_showvalue>:
			k++;
		}
}


void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 17a:	df 92       	push	r13
 17c:	ef 92       	push	r14
 17e:	ff 92       	push	r15
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	d8 2e       	mov	r13, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 186:	64 e6       	ldi	r22, 0x64	; 100
 188:	0e 94 c4 02 	call	0x588	; 0x588 <__udivmodqi4>
 18c:	28 2f       	mov	r18, r24
	T=(num - (H*100))/10;
 18e:	94 e6       	ldi	r25, 0x64	; 100
 190:	e9 2e       	mov	r14, r25
 192:	8e 9d       	mul	r24, r14
 194:	70 01       	movw	r14, r0
 196:	11 24       	eor	r1, r1
 198:	8d 2d       	mov	r24, r13
 19a:	99 27       	eor	r25, r25
 19c:	8e 19       	sub	r24, r14
 19e:	9f 09       	sbc	r25, r15
 1a0:	6a e0       	ldi	r22, 0x0A	; 10
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__divmodhi4>
 1a8:	8b 01       	movw	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 1aa:	82 2f       	mov	r24, r18
 1ac:	80 5d       	subi	r24, 0xD0	; 208
 1ae:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
	lcd_char(T+48);
 1b2:	80 2f       	mov	r24, r16
 1b4:	80 5d       	subi	r24, 0xD0	; 208
 1b6:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
	lcd_char(O+48);
 1ba:	de 18       	sub	r13, r14
 1bc:	8a e0       	ldi	r24, 0x0A	; 10
 1be:	08 9f       	mul	r16, r24
 1c0:	c0 01       	movw	r24, r0
 1c2:	11 24       	eor	r1, r1
 1c4:	d8 1a       	sub	r13, r24
 1c6:	8d 2d       	mov	r24, r13
 1c8:	80 5d       	subi	r24, 0xD0	; 208
 1ca:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	df 90       	pop	r13
 1d8:	08 95       	ret

000001da <lcd_gotoxy>:
}

void lcd_gotoxy(unsigned char row,unsigned char column)			//move cursor to the specified position
{
   if(row==0)
 1da:	88 23       	and	r24, r24
 1dc:	29 f4       	brne	.+10     	; 0x1e8 <lcd_gotoxy+0xe>
    {
	 lcd_cmd(0x80+column);
 1de:	86 2f       	mov	r24, r22
 1e0:	80 58       	subi	r24, 0x80	; 128
 1e2:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_cmd>
 1e6:	08 95       	ret
	}
   else if(row==1)
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	21 f4       	brne	.+8      	; 0x1f4 <lcd_gotoxy+0x1a>
	{
	 lcd_cmd(0xC0+column);	
 1ec:	86 2f       	mov	r24, r22
 1ee:	80 54       	subi	r24, 0x40	; 64
 1f0:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_cmd>
 1f4:	08 95       	ret

000001f6 <delay_ms>:
	}	
}


void delay_ms(unsigned int ms)
{
 1f6:	09 c0       	rjmp	.+18     	; 0x20a <delay_ms+0x14>
	int i;

	while (ms-- > 0)
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
	{
		
		for (i = 0; i < 3276; ++i)
			asm("nop");
 1fc:	00 00       	nop
 1fe:	2f 5f       	subi	r18, 0xFF	; 255
 200:	3f 4f       	sbci	r19, 0xFF	; 255
 202:	4c e0       	ldi	r20, 0x0C	; 12
 204:	2c 3c       	cpi	r18, 0xCC	; 204
 206:	34 07       	cpc	r19, r20
 208:	c9 f7       	brne	.-14     	; 0x1fc <delay_ms+0x6>
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	2f ef       	ldi	r18, 0xFF	; 255
 20e:	8f 3f       	cpi	r24, 0xFF	; 255
 210:	92 07       	cpc	r25, r18
 212:	91 f7       	brne	.-28     	; 0x1f8 <delay_ms+0x2>
 214:	08 95       	ret

00000216 <lcd_init>:
 216:	84 e1       	ldi	r24, 0x14	; 20
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <delay_ms>
 21e:	85 b3       	in	r24, 0x15	; 21
 220:	80 93 7a 00 	sts	0x007A, r24
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	84 bb       	out	0x14, r24	; 20
 228:	8f e0       	ldi	r24, 0x0F	; 15
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <delay_ms>
 230:	80 e2       	ldi	r24, 0x20	; 32
 232:	85 bb       	out	0x15, r24	; 21
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_cmd>
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_cmd>
 240:	80 e8       	ldi	r24, 0x80	; 128
 242:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_cmd>
 246:	84 e1       	ldi	r24, 0x14	; 20
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <delay_ms>
 24e:	08 95       	ret

00000250 <lcd_clear>:
	}
}

void lcd_clear()
{
 lcd_cmd(0x01);
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_cmd>
 256:	08 95       	ret

00000258 <delayms>:
unsigned int delaycounter1,delaycounter2;
void delayms(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
 258:	10 92 7e 00 	sts	0x007E, r1
 25c:	10 92 7d 00 	sts	0x007D, r1
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	50 e0       	ldi	r21, 0x00	; 0
	...
	 {
		 for(delaycounter2=0;delaycounter2<=800;delaycounter2++)
		  {
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 280:	4f 5f       	subi	r20, 0xFF	; 255
 282:	5f 4f       	sbci	r21, 0xFF	; 255
 284:	63 e0       	ldi	r22, 0x03	; 3
 286:	41 32       	cpi	r20, 0x21	; 33
 288:	56 07       	cpc	r21, r22
 28a:	71 f7       	brne	.-36     	; 0x268 <delayms+0x10>
 28c:	2f 5f       	subi	r18, 0xFF	; 255
 28e:	3f 4f       	sbci	r19, 0xFF	; 255
 290:	82 17       	cp	r24, r18
 292:	93 07       	cpc	r25, r19
 294:	38 f7       	brcc	.-50     	; 0x264 <delayms+0xc>
 296:	30 93 7e 00 	sts	0x007E, r19
 29a:	20 93 7d 00 	sts	0x007D, r18
 29e:	50 93 7c 00 	sts	0x007C, r21
 2a2:	40 93 7b 00 	sts	0x007B, r20
 2a6:	08 95       	ret

000002a8 <delayus>:
		  }
		
	 }
}

void delayus(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
 2a8:	10 92 7e 00 	sts	0x007E, r1
 2ac:	10 92 7d 00 	sts	0x007D, r1
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
	...
	 {
		 
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");
 2c8:	2f 5f       	subi	r18, 0xFF	; 255
 2ca:	3f 4f       	sbci	r19, 0xFF	; 255
 2cc:	82 17       	cp	r24, r18
 2ce:	93 07       	cpc	r25, r19
 2d0:	88 f7       	brcc	.-30     	; 0x2b4 <delayus+0xc>
 2d2:	30 93 7e 00 	sts	0x007E, r19
 2d6:	20 93 7d 00 	sts	0x007D, r18
 2da:	08 95       	ret

000002dc <check1>:
}

void check1()
{
	PORTA=0b11111110;
 2dc:	8e ef       	ldi	r24, 0xFE	; 254
 2de:	8b bb       	out	0x1b, r24	; 27
	delayms(10);
 2e0:	8a e0       	ldi	r24, 0x0A	; 10
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 2c 01 	call	0x258	; 0x258 <delayms>
	if(bit_is_clear(PINA,c1))
 2e8:	cc 99       	sbic	0x19, 4	; 25
 2ea:	11 c0       	rjmp	.+34     	; 0x30e <check1+0x32>
	{
		lcd_gotoxy(0,3);
 2ec:	63 e0       	ldi	r22, 0x03	; 3
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_string("key pressed");
 2f4:	80 e6       	ldi	r24, 0x60	; 96
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_string>
		lcd_gotoxy(1,5);
 2fc:	65 e0       	ldi	r22, 0x05	; 5
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_char('1');
 304:	81 e3       	ldi	r24, 0x31	; 49
 306:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
		PORTB=0x60;
 30a:	80 e6       	ldi	r24, 0x60	; 96
 30c:	88 bb       	out	0x18, r24	; 24
	}
	
	if(bit_is_clear(PINA,c2))
 30e:	cd 99       	sbic	0x19, 5	; 25
 310:	11 c0       	rjmp	.+34     	; 0x334 <check1+0x58>
	{
		lcd_gotoxy(0,3);
 312:	63 e0       	ldi	r22, 0x03	; 3
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_string("key pressed");
 31a:	80 e6       	ldi	r24, 0x60	; 96
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_string>
		lcd_gotoxy(1,5);
 322:	65 e0       	ldi	r22, 0x05	; 5
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_char('2');
 32a:	82 e3       	ldi	r24, 0x32	; 50
 32c:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
		PORTB=0xA0;
 330:	80 ea       	ldi	r24, 0xA0	; 160
 332:	88 bb       	out	0x18, r24	; 24
		
	}
	
	if(bit_is_clear(PINA,c3))
 334:	ce 99       	sbic	0x19, 6	; 25
 336:	11 c0       	rjmp	.+34     	; 0x35a <check1+0x7e>
	{
		lcd_gotoxy(0,3);
 338:	63 e0       	ldi	r22, 0x03	; 3
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_string("key pressed");
 340:	80 e6       	ldi	r24, 0x60	; 96
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_string>
		lcd_gotoxy(1,5);
 348:	65 e0       	ldi	r22, 0x05	; 5
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_char('3');
 350:	83 e3       	ldi	r24, 0x33	; 51
 352:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
		PORTB=0x90;
 356:	80 e9       	ldi	r24, 0x90	; 144
 358:	88 bb       	out	0x18, r24	; 24
		
	}
	
	if(bit_is_clear(PINA,c4))
 35a:	cf 99       	sbic	0x19, 7	; 25
 35c:	0f c0       	rjmp	.+30     	; 0x37c <check1+0xa0>
	{
		lcd_gotoxy(0,3);
 35e:	63 e0       	ldi	r22, 0x03	; 3
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_string("key pressed");
 366:	80 e6       	ldi	r24, 0x60	; 96
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_string>
		lcd_gotoxy(1,5);
 36e:	65 e0       	ldi	r22, 0x05	; 5
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_char('A');
 376:	81 e4       	ldi	r24, 0x41	; 65
 378:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
 37c:	08 95       	ret

0000037e <check2>:
		
	}
}

void check2()
{
	PORTA=0b11111101;
 37e:	8d ef       	ldi	r24, 0xFD	; 253
 380:	8b bb       	out	0x1b, r24	; 27
	delayms(10);
 382:	8a e0       	ldi	r24, 0x0A	; 10
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 2c 01 	call	0x258	; 0x258 <delayms>
	if(bit_is_clear(PINA,c1))
 38a:	cc 99       	sbic	0x19, 4	; 25
 38c:	11 c0       	rjmp	.+34     	; 0x3b0 <check2+0x32>
	{
		lcd_gotoxy(0,3);
 38e:	63 e0       	ldi	r22, 0x03	; 3
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_string("key pressed");
 396:	80 e6       	ldi	r24, 0x60	; 96
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_string>
		lcd_gotoxy(1,5);
 39e:	65 e0       	ldi	r22, 0x05	; 5
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_char('4');
 3a6:	84 e3       	ldi	r24, 0x34	; 52
 3a8:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
		PORTB=0x20;
 3ac:	80 e2       	ldi	r24, 0x20	; 32
 3ae:	88 bb       	out	0x18, r24	; 24
		
	}
	
	if(bit_is_clear(PINA,c2))
 3b0:	cd 99       	sbic	0x19, 5	; 25
 3b2:	10 c0       	rjmp	.+32     	; 0x3d4 <check2+0x56>
	{
		lcd_gotoxy(0,3);
 3b4:	63 e0       	ldi	r22, 0x03	; 3
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_string("key pressed");
 3bc:	80 e6       	ldi	r24, 0x60	; 96
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_string>
		lcd_gotoxy(1,5);
 3c4:	65 e0       	ldi	r22, 0x05	; 5
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_char('5');
 3cc:	85 e3       	ldi	r24, 0x35	; 53
 3ce:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
		PORTB=0x00;
 3d2:	18 ba       	out	0x18, r1	; 24
	
	}
	
	if(bit_is_clear(PINA,c3))
 3d4:	ce 99       	sbic	0x19, 6	; 25
 3d6:	11 c0       	rjmp	.+34     	; 0x3fa <check2+0x7c>
	{
		lcd_gotoxy(0,3);
 3d8:	63 e0       	ldi	r22, 0x03	; 3
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_string("key pressed");
 3e0:	80 e6       	ldi	r24, 0x60	; 96
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_string>
		lcd_gotoxy(1,5);
 3e8:	65 e0       	ldi	r22, 0x05	; 5
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_char('6');
 3f0:	86 e3       	ldi	r24, 0x36	; 54
 3f2:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
		PORTB=0x80;
 3f6:	80 e8       	ldi	r24, 0x80	; 128
 3f8:	88 bb       	out	0x18, r24	; 24
		
	}
	
	if(bit_is_clear(PINA,c4))
 3fa:	cf 99       	sbic	0x19, 7	; 25
 3fc:	0f c0       	rjmp	.+30     	; 0x41c <check2+0x9e>
	{
		lcd_gotoxy(0,3);
 3fe:	63 e0       	ldi	r22, 0x03	; 3
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_string("key pressed");
 406:	80 e6       	ldi	r24, 0x60	; 96
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_string>
		lcd_gotoxy(1,5);
 40e:	65 e0       	ldi	r22, 0x05	; 5
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_char('B');
 416:	82 e4       	ldi	r24, 0x42	; 66
 418:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
 41c:	08 95       	ret

0000041e <check3>:
		
	}
}

void check3()
{
	PORTA=0b11111011;
 41e:	8b ef       	ldi	r24, 0xFB	; 251
 420:	8b bb       	out	0x1b, r24	; 27
	delayms(10);
 422:	8a e0       	ldi	r24, 0x0A	; 10
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 2c 01 	call	0x258	; 0x258 <delayms>
	if(bit_is_clear(PINA,c1))
 42a:	cc 99       	sbic	0x19, 4	; 25
 42c:	0f c0       	rjmp	.+30     	; 0x44c <check3+0x2e>
	{
		lcd_gotoxy(0,3);
 42e:	63 e0       	ldi	r22, 0x03	; 3
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_string("key pressed");
 436:	80 e6       	ldi	r24, 0x60	; 96
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_string>
		lcd_gotoxy(1,5);
 43e:	65 e0       	ldi	r22, 0x05	; 5
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_char('7');
 446:	87 e3       	ldi	r24, 0x37	; 55
 448:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
		
	}
	
	if(bit_is_clear(PINA,c2))
 44c:	cd 99       	sbic	0x19, 5	; 25
 44e:	11 c0       	rjmp	.+34     	; 0x472 <__stack+0x13>
	{
		lcd_gotoxy(0,3);
 450:	63 e0       	ldi	r22, 0x03	; 3
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_string("key pressed");
 458:	80 e6       	ldi	r24, 0x60	; 96
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_string>
		lcd_gotoxy(1,5);
 460:	65 e0       	ldi	r22, 0x05	; 5
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_char('8');
 468:	88 e3       	ldi	r24, 0x38	; 56
 46a:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
		PORTB=0x50;
 46e:	80 e5       	ldi	r24, 0x50	; 80
 470:	88 bb       	out	0x18, r24	; 24
		
	}
	
	if(bit_is_clear(PINA,c3))
 472:	ce 99       	sbic	0x19, 6	; 25
 474:	0f c0       	rjmp	.+30     	; 0x494 <__stack+0x35>
	{
		lcd_gotoxy(0,3);
 476:	63 e0       	ldi	r22, 0x03	; 3
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_string("key pressed");
 47e:	80 e6       	ldi	r24, 0x60	; 96
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_string>
		lcd_gotoxy(1,5);
 486:	65 e0       	ldi	r22, 0x05	; 5
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_char('9');
 48e:	89 e3       	ldi	r24, 0x39	; 57
 490:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
		
	}
	
	if(bit_is_clear(PINA,c4))
 494:	cf 99       	sbic	0x19, 7	; 25
 496:	0f c0       	rjmp	.+30     	; 0x4b6 <__stack+0x57>
	{
		lcd_gotoxy(0,3);
 498:	63 e0       	ldi	r22, 0x03	; 3
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_string("key pressed");
 4a0:	80 e6       	ldi	r24, 0x60	; 96
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_string>
		lcd_gotoxy(1,5);
 4a8:	65 e0       	ldi	r22, 0x05	; 5
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_char('C');
 4b0:	83 e4       	ldi	r24, 0x43	; 67
 4b2:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
 4b6:	08 95       	ret

000004b8 <check4>:
		
	}
}

void check4()
{
	PORTA=0b1110111;
 4b8:	87 e7       	ldi	r24, 0x77	; 119
 4ba:	8b bb       	out	0x1b, r24	; 27
	delayms(10);
 4bc:	8a e0       	ldi	r24, 0x0A	; 10
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 2c 01 	call	0x258	; 0x258 <delayms>
	if(bit_is_clear(PINA,c1))
 4c4:	cc 99       	sbic	0x19, 4	; 25
 4c6:	0f c0       	rjmp	.+30     	; 0x4e6 <check4+0x2e>
	{
		lcd_gotoxy(0,3);
 4c8:	63 e0       	ldi	r22, 0x03	; 3
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_string("key pressed");
 4d0:	80 e6       	ldi	r24, 0x60	; 96
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_string>
		lcd_gotoxy(1,5);
 4d8:	65 e0       	ldi	r22, 0x05	; 5
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_char('*');
 4e0:	8a e2       	ldi	r24, 0x2A	; 42
 4e2:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
		
	}
	
	if(bit_is_clear(PINA,c2))
 4e6:	cd 99       	sbic	0x19, 5	; 25
 4e8:	0f c0       	rjmp	.+30     	; 0x508 <check4+0x50>
	{
		lcd_gotoxy(0,3);
 4ea:	63 e0       	ldi	r22, 0x03	; 3
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_string("key pressed");
 4f2:	80 e6       	ldi	r24, 0x60	; 96
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_string>
		lcd_gotoxy(1,5);
 4fa:	65 e0       	ldi	r22, 0x05	; 5
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_char('0');
 502:	80 e3       	ldi	r24, 0x30	; 48
 504:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
		
	}
	
	if(bit_is_clear(PINA,c3))
 508:	ce 99       	sbic	0x19, 6	; 25
 50a:	0f c0       	rjmp	.+30     	; 0x52a <check4+0x72>
	{
		lcd_gotoxy(0,3);
 50c:	63 e0       	ldi	r22, 0x03	; 3
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_string("key pressed");
 514:	80 e6       	ldi	r24, 0x60	; 96
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_string>
		lcd_gotoxy(1,5);
 51c:	65 e0       	ldi	r22, 0x05	; 5
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_char('#');
 524:	83 e2       	ldi	r24, 0x23	; 35
 526:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
		
	}
	
	if(bit_is_clear(PINA,c4))
 52a:	cf 99       	sbic	0x19, 7	; 25
 52c:	0f c0       	rjmp	.+30     	; 0x54c <check4+0x94>
	{
		lcd_gotoxy(0,3);
 52e:	63 e0       	ldi	r22, 0x03	; 3
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_string("key pressed");
 536:	80 e6       	ldi	r24, 0x60	; 96
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_string>
		lcd_gotoxy(1,5);
 53e:	65 e0       	ldi	r22, 0x05	; 5
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
		lcd_char('D');
 546:	84 e4       	ldi	r24, 0x44	; 68
 548:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_char>
 54c:	08 95       	ret

0000054e <main>:
 54e:	1f 93       	push	r17
 550:	8f e0       	ldi	r24, 0x0F	; 15
 552:	8a bb       	out	0x1a, r24	; 26
 554:	10 ef       	ldi	r17, 0xF0	; 240
 556:	1b bb       	out	0x1b, r17	; 27
 558:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_init>
 55c:	17 bb       	out	0x17, r17	; 23
 55e:	18 ba       	out	0x18, r1	; 24
 560:	63 e0       	ldi	r22, 0x03	; 3
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_gotoxy>
 568:	8c e6       	ldi	r24, 0x6C	; 108
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_string>
 570:	80 ef       	ldi	r24, 0xF0	; 240
 572:	8b bb       	out	0x1b, r24	; 27
 574:	89 b3       	in	r24, 0x19	; 25
 576:	0e 94 6e 01 	call	0x2dc	; 0x2dc <check1>
 57a:	0e 94 bf 01 	call	0x37e	; 0x37e <check2>
 57e:	0e 94 0f 02 	call	0x41e	; 0x41e <check3>
 582:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <check4>
 586:	f4 cf       	rjmp	.-24     	; 0x570 <main+0x22>

00000588 <__udivmodqi4>:
 588:	99 1b       	sub	r25, r25
 58a:	79 e0       	ldi	r23, 0x09	; 9
 58c:	04 c0       	rjmp	.+8      	; 0x596 <__udivmodqi4_ep>

0000058e <__udivmodqi4_loop>:
 58e:	99 1f       	adc	r25, r25
 590:	96 17       	cp	r25, r22
 592:	08 f0       	brcs	.+2      	; 0x596 <__udivmodqi4_ep>
 594:	96 1b       	sub	r25, r22

00000596 <__udivmodqi4_ep>:
 596:	88 1f       	adc	r24, r24
 598:	7a 95       	dec	r23
 59a:	c9 f7       	brne	.-14     	; 0x58e <__udivmodqi4_loop>
 59c:	80 95       	com	r24
 59e:	08 95       	ret

000005a0 <__divmodhi4>:
 5a0:	97 fb       	bst	r25, 7
 5a2:	09 2e       	mov	r0, r25
 5a4:	07 26       	eor	r0, r23
 5a6:	0a d0       	rcall	.+20     	; 0x5bc <__divmodhi4_neg1>
 5a8:	77 fd       	sbrc	r23, 7
 5aa:	04 d0       	rcall	.+8      	; 0x5b4 <__divmodhi4_neg2>
 5ac:	0c d0       	rcall	.+24     	; 0x5c6 <__udivmodhi4>
 5ae:	06 d0       	rcall	.+12     	; 0x5bc <__divmodhi4_neg1>
 5b0:	00 20       	and	r0, r0
 5b2:	1a f4       	brpl	.+6      	; 0x5ba <__divmodhi4_exit>

000005b4 <__divmodhi4_neg2>:
 5b4:	70 95       	com	r23
 5b6:	61 95       	neg	r22
 5b8:	7f 4f       	sbci	r23, 0xFF	; 255

000005ba <__divmodhi4_exit>:
 5ba:	08 95       	ret

000005bc <__divmodhi4_neg1>:
 5bc:	f6 f7       	brtc	.-4      	; 0x5ba <__divmodhi4_exit>
 5be:	90 95       	com	r25
 5c0:	81 95       	neg	r24
 5c2:	9f 4f       	sbci	r25, 0xFF	; 255
 5c4:	08 95       	ret

000005c6 <__udivmodhi4>:
 5c6:	aa 1b       	sub	r26, r26
 5c8:	bb 1b       	sub	r27, r27
 5ca:	51 e1       	ldi	r21, 0x11	; 17
 5cc:	07 c0       	rjmp	.+14     	; 0x5dc <__udivmodhi4_ep>

000005ce <__udivmodhi4_loop>:
 5ce:	aa 1f       	adc	r26, r26
 5d0:	bb 1f       	adc	r27, r27
 5d2:	a6 17       	cp	r26, r22
 5d4:	b7 07       	cpc	r27, r23
 5d6:	10 f0       	brcs	.+4      	; 0x5dc <__udivmodhi4_ep>
 5d8:	a6 1b       	sub	r26, r22
 5da:	b7 0b       	sbc	r27, r23

000005dc <__udivmodhi4_ep>:
 5dc:	88 1f       	adc	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	5a 95       	dec	r21
 5e2:	a9 f7       	brne	.-22     	; 0x5ce <__udivmodhi4_loop>
 5e4:	80 95       	com	r24
 5e6:	90 95       	com	r25
 5e8:	bc 01       	movw	r22, r24
 5ea:	cd 01       	movw	r24, r26
 5ec:	08 95       	ret

000005ee <_exit>:
 5ee:	ff cf       	rjmp	.-2      	; 0x5ee <_exit>
